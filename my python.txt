[x+1 if x >= 45 else x+5 for x in l]
And for a reward, here is the comment, I wrote to remember this the first time I did this error:

Python's conditional expression is a if C else b and can't be used as:

[a for i in items if C else b]
The right form is:

[a if C else b for i in items]
Even though there is a valid form:

[a for i in items if C]
But that isn't the same as that is how you filter by C, but they can be combined:

[a if tC else b for i in items if fC]

http://www.pythonforbeginners.com/basics/list-comprehensions-in-python
http://blog.cdleary.com/2010/04/learning-python-by-example-list-comprehensions/


list-comprehension always returns a list.
[x for x in range(5)] => list
(x for x in range(5)) => generator object


https://www.datacamp.com/community/tutorials/python-iterator-tutorial

Write about generator in same post
https://www.programiz.com/python-programming/generator

x = (1 if x%2 == 0 else 0 for x in range(10))
Generator expression can be used inside functions. but it can be used only once and then it exhausts. 
sum(x) = 5
sum(x) = 0

On the other hand, list (as a sequence) can be used any number of time and they will produce the same result.
sum(x) = 5
sum(x) = 5

Obviously generator are more memory efficient.
def f():
  2   return 1
  3   yield 0
  4 
  5 a = f()
  6 while(True):
  7  try:
  8    print(a.__next__())
  9  except StopIteration as e:
 10    print(e.value)
 11    break


1 def f():
  2  yield 1
  3  return 0
  4 
  5 a = f()
  6 while(True):
  7   try:
  8     print(a.__next__())
  9   except StopIteration as e:
 10     print(e.value)
 11     break
~    

.........................................
next(...)
    next(iterator[, default])
    
    Return the next item from the iterator. If default is given and the iterator
    is exhausted, it is returned instead of raising StopIteration.
(END)

  1 a = iter([10, 20])
  2 for _ in range(5):
  3   next_val = next(a, 0)
  4   print(next_val)


sum(iterable, start=0, /)
    Return the sum of a 'start' value (default: 0) plus an iterable of numbers
    
    When the iterable is empty, return the start value.
    This function is intended specifically for use with numeric values and may
    reject non-numeric types.

example:
a = (1 if x%2==0 else 0  for x in range(10))
sum(x) = 5
sum(x) = 0 ==> here even though __next__ throws StopIteration, sum returns 0



